## save thetas and result to a txt file
from utils import J,j, gradient_descent, forward_prop, backward_prop, sigmoid,\
    gradient_validation, bin_logistic_error, gradient_for_op_minimize, gradient_descent_for_grad_check
import numpy as np
from numpy import array
import matplotlib.pyplot as plt
import pandas as pd
from scipy import optimize
import os

## logistic regression
## cross entropy error
## hypostesis will change the layer number

current_dir = os.path.dirname(os.path.abspath(__file__))
data_path = os.path.join(current_dir, "classification2.txt")

try:
    with open(data_path, "r") as input_file:
        training_data = input_file.readlines()
except FileNotFoundError:
    print(f"Error: Could not find {data_path}")
    print(f"Current working directory: {os.getcwd()}")
training_data = [line.strip().split(",") for line in training_data]
####################################
########## RANDOMIZE INPUT #########
####################################

input_data = np.array([[float(data[0]), float(data[1])] for data in training_data])
X = input_data
Y = np.array([int(data[2]) for data in training_data]).reshape(-1, 1)
#indices = np.arange(X.shape[0])
#np.random.shuffle(indices)
#X = X[indices]
#Y= Y[indices]
indices = None

####################################
###### data sets conditioning ######
####################################
train_set_X , train_set_Y = X[:80] , Y[:80]  ## 80 for train
valid_set_X , valid_set_Y = X[80:103] , Y[80:103]  ## 23 for validation
check_set_X , check_set_Y = X[103:] , Y[103:]  ## 15 for test

M_train = len(train_set_X)
M_valid = len(valid_set_X)
M_check = len(check_set_X)

theta = [array([[ 0.69374133, -1.25193936, -0.36068025],
       [-1.12865992,  1.44309169,  0.41420867],
       [-1.01968555,  0.51235078, -1.56803695],
       [-1.46511991,  1.42766836,  0.97696354],
       [-1.57084982,  1.08841283,  1.65923756],
       [ 0.39437567, -0.46488223,  0.70529858],
       [ 0.54153693, -0.57954813, -0.57563584],
       [-0.01105754, -0.24943039, -0.04784534],
       [-0.61802033,  0.51842477,  0.79698323],
       [ 1.20183413, -0.94613146,  1.336226  ],
       [-0.7073443 ,  1.28501074, -0.68646264],
       [-0.36239722, -0.84327851,  0.1490116 ],
       [ 0.12157871, -0.28232658,  0.55556037],
       [ 0.06835817, -1.59878769,  0.07546544],
       [ 0.71979664, -0.26272628,  0.86712172]]), array([[-0.12324626, -0.23711924,  0.70159114,  0.42586837,  0.60392808,
         0.74107831, -0.37668386, -0.34695452,  0.23126838,  0.49368355,
        -0.66539531,  0.26223974, -0.229604  ,  0.14286692, -0.84612863,
        -0.3061022 ],
       [-0.24686483, -0.57661825,  0.68069766,  0.23801153,  0.07407821,
         0.12128956, -0.24484217, -0.12854667,  0.05603198,  0.1537183 ,
        -0.7199644 ,  0.74879041, -0.14171092, -0.08258027, -0.14428009,
        -0.02744587],
       [-0.00255513, -0.0223133 , -0.0077266 , -0.22850669,  0.18919152,
         1.01353032,  0.08071247,  0.02897874,  0.03274368, -0.22119657,
        -0.30008298, -0.19252991, -0.18109977,  0.1262712 ,  0.00402748,
        -0.28482661],
       [-0.01447267, -0.12633829,  0.85533282,  0.59192312,  0.47326876,
         0.18140008, -0.25402566,  0.28778033, -0.49057694,  0.2379407 ,
        -0.46739226,  0.41150948, -0.42880072, -0.36593575, -0.44657696,
        -0.39227733],
       [-0.22361039,  0.20413677, -0.33322221, -0.61816556, -0.8177134 ,
        -0.10427141,  0.01254998,  0.44256391,  0.48414483, -0.03316185,
         0.39192697, -0.46043626, -0.09903247, -0.07792231,  0.6866737 ,
         0.0204357 ],
       [-0.18816136, -0.19425467, -0.34122783, -0.44753829, -0.19378951,
        -0.67316631,  0.13201646, -0.19551577,  0.09006258, -0.20608142,
         0.26301758,  0.11283849,  0.5296985 ,  0.16063738,  0.61181714,
        -0.26731221],
       [ 0.4535749 ,  0.16581791,  0.1257923 ,  0.12322137,  0.35967914,
         0.51043863, -0.00368121, -0.17431989, -0.73910072, -0.06821797,
        -0.06278592,  0.20502146, -0.13043633,  0.10630688, -0.36561753,
        -0.7081543 ],
       [ 0.08603636,  0.4639921 , -0.06690946,  0.26573711, -0.16718871,
        -0.60471062,  0.03380636, -0.21247589, -0.16032553,  0.16766462,
        -0.09188434, -0.68468196,  0.02093219,  0.18169313,  0.30355195,
         0.00318306],
       [-0.30674002, -0.24428807, -0.52756913, -0.1060592 ,  0.25966406,
         0.24567215, -0.25975348, -0.04032517,  0.0700956 ,  0.16233078,
         0.12104432, -0.15184751,  0.15351167,  0.06894671, -0.1605043 ,
         0.5337192 ],
       [ 0.1902053 ,  0.49205136, -0.40286649, -0.45423665, -0.93178018,
        -0.77326577,  0.50169652,  0.21988566,  0.05079341, -0.36494929,
         0.66471563, -0.53889654,  0.36222354,  0.21560872,  0.26833885,
         0.04539383],
       [-0.08702149, -0.19602707,  0.33617172,  0.42727231,  0.41001234,
         0.57926755,  0.09560769, -0.2897714 ,  0.29563578, -0.00566883,
        -0.64163967,  0.30169719, -0.71723513,  0.11769859,  0.14502679,
        -0.08332634],
       [-0.2278261 ,  0.64134275, -0.3159479 , -0.22083259, -0.46776368,
        -0.3375839 ,  0.2923968 ,  0.19257402, -0.0330627 , -0.30236736,
         0.36626009, -0.50792376,  0.43485567, -0.18570228,  0.2414094 ,
         0.08644721],
       [-0.14301608, -0.46200725, -0.06519456, -0.14731939, -0.21170276,
        -0.32432459, -0.03030027, -0.26939087,  0.20179646,  0.02801379,
         0.19288473, -0.30106635,  0.28408005, -0.13087718,  0.47431777,
         0.03692151],
       [-0.0792243 ,  1.11338068, -0.29866567, -0.34626618, -0.92557576,
        -1.00770606,  0.57272298,  0.78101963,  0.00566771, -0.50454659,
         0.28766644, -0.43593443,  0.23463644,  0.34853115,  0.77169387,
         0.12990792],
       [ 0.1883973 , -0.15344269,  0.07710771, -0.20529848, -0.03937836,
        -0.04224143, -0.54873629,  0.00580858,  0.30417399, -0.02328335,
        -0.14680092,  0.36517978, -0.05879578, -0.16789545,  0.01399316,
        -0.13073009]]), array([[-0.30436474, -2.10225289, -1.30473682, -0.60640565, -1.62860903,
         1.11578628,  0.72256511, -0.89291826,  0.51820531, -0.11534207,
         1.7246707 , -1.22152502,  1.26034186,  0.36975212,  2.1249321 ,
        -0.35757442]])]

acc = 0
for i in range(118):
    if Y[i] == np.round(forward_prop(X[i], theta, len(theta)+1)[0][-1]):
        acc +=  1


print(acc/118)